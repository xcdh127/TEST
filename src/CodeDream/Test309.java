package CodeDream;

/*给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: prices = [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
示例 2:
输入: prices = [1]
输出: 0
提示：
1 <= prices.length <= 5000
0 <= prices[i] <= 1000
*/
public class Test309 {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][3];
        //持有股票
        dp[0][0] = -prices[0];
        //不持有股票且在冻潮期
        dp[0][1] = 0;
        //不持有股票且不在冻潮期
        dp[0][2] = 0;
        for (int i = 1; i < n; i++) {
            //持有股票，第i天持有股票，第i天之前就持有股票，取两者中的较大者
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            //不持有股票且在冻潮期，只有一种情况第i天卖出股票
            dp[i][1] = dp[i - 1][0] + prices[i];
            //不持有股票且不在冻潮期，第i-1天不持有股票且在冻潮期和第i-1天不持有股票且不在冻潮期取较大者
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1]);
        }
        //返回不持有股票的最大利润
        return Math.max(dp[n - 1][1], dp[n - 1][2]);
    }
}
