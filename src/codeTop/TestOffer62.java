package codeTop;
/*0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
示例 1：
输入: n = 5, m = 3
输出:3
示例 2：
输入: n = 10, m = 17
输出:2
限制：
1 <= n <= 10^5
1 <= m <= 10^6
通过次数159,797提交次数242,346
*/
public class TestOffer62 {
    public int lastRemaining(int n, int m) {
        //记录n个数字的dp数组
        int[] dp=new int[n+1];
        //当数字只有0时，最后剩下的数字就是0
        dp[0]=0;
        //将前一位(最后剩下的数字+m)%i，就是0～i数字最后剩下的数字
        for (int i = 1; i <= n; i++) {
            dp[i]=(dp[i-1]+m)%i;
        }
        //返回0～n数字，最后剩下的数字
        return dp[n];
    }
}
