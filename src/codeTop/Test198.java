package codeTop;
/*你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
提示：
1 <= nums.length <= 100
0 <= nums[i] <= 400
通过次数592,044提交次数1,105,647
*/
public class Test198 {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        //当n==1时，返回数字中的首元素
        if (n==1){
            return nums[0];
        }
        //当n==2时，返回数字中的两个数组中的较大值
        if (n==2){
            return Math.max(nums[0],nums[1]);
        }
        //初始化dp[0]=nums[0]
        dp[0]=nums[0];
        //初始化dp[1]为两个数组中较大的值
        dp[1]=Math.max(nums[0],nums[1]);
        for (int i=2;i<n;i++){
            //（1）不偷当前屋子的物品，偷前一个位置的屋子的物品；（2）偷当前屋子的物品，偷前两个位置的屋子的物品
            dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        //返回能够偷取物品的最大值
        return dp[n-1];
    }
}
